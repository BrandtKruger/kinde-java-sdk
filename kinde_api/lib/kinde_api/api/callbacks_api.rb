=begin
#Kinde Management API

#Provides endpoints to manage your Kinde Businesses

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class CallbacksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Redirect Callback URLs
    # Add additional redirect callback URLs. 
    # @param app_id [String] The identifier for the application.
    # @param urls [Array<String>] Array of callback urls.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_redirect_callback_urls(app_id, urls, opts = {})
      add_redirect_callback_urls_with_http_info(app_id, urls, opts)
      nil
    end

    # Add Redirect Callback URLs
    # Add additional redirect callback URLs. 
    # @param app_id [String] The identifier for the application.
    # @param urls [Array<String>] Array of callback urls.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_redirect_callback_urls_with_http_info(app_id, urls, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.add_redirect_callback_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.add_redirect_callback_urls"
      end
      # verify the required parameter 'urls' is set
      if @api_client.config.client_side_validation && urls.nil?
        fail ArgumentError, "Missing the required parameter 'urls' when calling CallbacksApi.add_redirect_callback_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_redirect_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'urls'] = @api_client.build_collection_param(urls, :multi)

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.add_redirect_callback_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#add_redirect_callback_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Callback URLs
    # Returns an application's redirect callback URLs. 
    # @param app_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [GetRedirectCallbackUrlsResponse]
    def get_callback_urls(app_id, opts = {})
      data, _status_code, _headers = get_callback_urls_with_http_info(app_id, opts)
      data
    end

    # List Callback URLs
    # Returns an application&#39;s redirect callback URLs. 
    # @param app_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRedirectCallbackUrlsResponse, Integer, Hash)>] GetRedirectCallbackUrlsResponse data, response status code and response headers
    def get_callback_urls_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.get_callback_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.get_callback_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_redirect_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRedirectCallbackUrlsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.get_callback_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#get_callback_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace redirect callback URLs
    # Replace all redirect callback URLs. 
    # @param app_id [String] The identifier for the application.
    # @param urls [Array<String>] Array of callback urls.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def replace_redirect_callback_urls(app_id, urls, opts = {})
      replace_redirect_callback_urls_with_http_info(app_id, urls, opts)
      nil
    end

    # Replace redirect callback URLs
    # Replace all redirect callback URLs. 
    # @param app_id [String] The identifier for the application.
    # @param urls [Array<String>] Array of callback urls.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def replace_redirect_callback_urls_with_http_info(app_id, urls, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.replace_redirect_callback_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.replace_redirect_callback_urls"
      end
      # verify the required parameter 'urls' is set
      if @api_client.config.client_side_validation && urls.nil?
        fail ArgumentError, "Missing the required parameter 'urls' when calling CallbacksApi.replace_redirect_callback_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_redirect_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'urls'] = @api_client.build_collection_param(urls, :multi)

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.replace_redirect_callback_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#replace_redirect_callback_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
